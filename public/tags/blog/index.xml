<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on Anak Wannaphaschaiyong</title>
    <link>https://awannaphasch2016.github.io/tags/blog/</link>
    <description>Recent content in blog on Anak Wannaphaschaiyong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://awannaphasch2016.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building fundamental in Emacs: How to customize key binding in vanilla Emacs?</title>
      <link>https://awannaphasch2016.github.io/posts/building-fundamental-in-emacs-how-to-customize-key-binding-in-vanilla-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/building-fundamental-in-emacs-how-to-customize-key-binding-in-vanilla-emacs/</guid>
      <description>When I first get into Emacs, I was a vim user before, so I picked up Doom Emacs without experience with vanilla Emacs. Transition has been smooth so far, but because I never has experience with Vanilla Emacs before when I encounter a bug in Doom Emacs. I always have to first figure out if it is Doom Emacs problem or Emacs problems. Because of this, I put out a new blog series to help me build a stronger foundation of Vanilla Emacs.</description>
    </item>
    
    <item>
      <title>Comprehensive review of snippets management tools in emacs. The best way to manage code snippets in emacs.</title>
      <link>https://awannaphasch2016.github.io/posts/comprehensive-review-of-snippets-management-tools-in-emacs.-the-best-way-to-manage-code-snippets-in-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/comprehensive-review-of-snippets-management-tools-in-emacs.-the-best-way-to-manage-code-snippets-in-emacs/</guid>
      <description>Personally, I think snippets is under untilize. Same as notes. The fact is people just don&amp;rsquo;t do neither snippets or notes.
I defined code snippet as followed
 A collection of either small/large code which may store in single/multiple files that you will revisit against in the future.
 Focusing on manging code snippets in emacs, few packages come to mind including: yassnipet, auto-yasnippet, yankpad, and code library.
In my workflow, to share code snippet with others, gists is needed.</description>
    </item>
    
    <item>
      <title>Dev Logs: Auto-YASnippet (aka aya) dive deep.</title>
      <link>https://awannaphasch2016.github.io/posts/dev-logs-auto-yasnippet-aka-aya-dive-deep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/dev-logs-auto-yasnippet-aka-aya-dive-deep/</guid>
      <description>Dev logs is new blog series which dive deep into implementation level. The goal is to understand how things works. I figure this should be an interesting series because I always wanted to know how these program works underneath. Instead of explaining the whole code base, I will only focus on the &amp;ldquo;magical&amp;rdquo; part that sparked my interest the most.
Todays I present to you aya.
I started of the series with aya because, I think, it is a small package with the right portion of magic.</description>
    </item>
    
    <item>
      <title>Economic inside blockchain: How does supply-demand mechanism works in blockchain?</title>
      <link>https://awannaphasch2016.github.io/posts/economic-inside-blockchain-how-does-supply-demand-mechanism-works-in-blockchain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/economic-inside-blockchain-how-does-supply-demand-mechanism-works-in-blockchain/</guid>
      <description>Gas and Denominations of coins   Figure 1: Denominations of Ethers
  In this section, we will focus on denominations of Ethers. The goal is to provide more concrete example into denomination of a coin.
If you are familiar with Etherem, we have heard Wei and GWei. These are not the only two denominators of Ethers. List of all denominators of Ether is shown in Fig. which is from Etherem yellow paper (aka.</description>
    </item>
    
    <item>
      <title>Emacs Package Explained: How to customize key binding in evil modes?</title>
      <link>https://awannaphasch2016.github.io/posts/emacs-package-explained-how-to-customize-key-binding-in-evil-modes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/emacs-package-explained-how-to-customize-key-binding-in-evil-modes/</guid>
      <description>This is my summary of a more thoroughly explained evil guide, see here.
Keymap Precendence in vanilla emacs  overriding-terminal-local-map for terminal-specific key bind overriding-local-map keymap char property at point keymaps for the current character. Yasnippet keymaps are in this category. emulation-mode-map-alists. Apparently, its more multi-mode keymap management. I am not sure what this means, but if i have to guess it is used in modes that have its known key precedence or other complexity that its key binding system brings.</description>
    </item>
    
    <item>
      <title>How to parse text with awk?</title>
      <link>https://awannaphasch2016.github.io/posts/how-to-parse-text-with-awk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/how-to-parse-text-with-awk/</guid>
      <description>ref  https://stackoverflow.com/questions/6284560/how-to-split-a-variable-by-a-special-character/6284596    Awk Syntax awk &amp;#39;(PATTERN1){...print something..} (PATTERN2){..print something..}&amp;#39; awk &amp;#39;PATTERN1{...print something..} PATTERN2{..print something..}&amp;#39; for each line, if PATTERNN is matched, command in {} will be executed.
syntax `awk &amp;lsquo;NR==1{print}&amp;rsquo; [FILE]` `awk &amp;lsquo;NR==1&amp;rsquo; [FILE]` note for line 1, print whole line `awk &amp;lsquo;NR==1{}&amp;rsquo; [FILE]` note for line 1, {} = don&amp;rsquo;t do anything `awk &amp;lsquo;NR==1{print} {print}&amp;rsquo; [FILE]` note {} without condition is the same as condition always set to True.</description>
    </item>
    
    <item>
      <title>How to publish blog on Jekyll with example.</title>
      <link>https://awannaphasch2016.github.io/posts/how-to-publish-blog-on-jekyll-with-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/how-to-publish-blog-on-jekyll-with-example/</guid>
      <description>You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.
Jekyll requires blog post files to be named according to the following format:
`YEAR-MONTH-DAY-title.MARKUP`
Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file.</description>
    </item>
    
    <item>
      <title>How to use auto yasnippet (aka aya) in your workflow?</title>
      <link>https://awannaphasch2016.github.io/posts/how-to-use-auto-yasnippet-aka-aya-in-your-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/how-to-use-auto-yasnippet-aka-aya-in-your-workflow/</guid>
      <description>All of the content I presented below can be found at Auto-YASnippet Github repo.
Auto-Yasnippet (aka aya) provides the following interactive commands: aya-create, aya-expand, aya-persiste-snippet, and aya-open-line:
I don&amp;rsquo;t quite understand aya-open-line yet, so I will not be explaining it here.
This snippet package support ad-hoc style of editing workflow where you can create useful snippet to be reused as you editing.
Without aya, one would have do the following</description>
    </item>
    
    <item>
      <title>My Citation Management Workflow.</title>
      <link>https://awannaphasch2016.github.io/posts/my-citation-management-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/my-citation-management-workflow/</guid>
      <description>there are three categories of note taking process
 organize files. write notes on a file. search files and notes (aka completion in emacs) organize notes reference to file.  First two are easy to achieve. Put notes and pdf files in folders does the job. The third condition is arguably not difficult neither. One can search for a file given a file directory quickly which can be done with any of the completion packages (e.</description>
    </item>
    
    <item>
      <title>Using Terraform to set up ec2 instances for data science projects.</title>
      <link>https://awannaphasch2016.github.io/posts/using-terraform-to-set-up-ec2-instances-for-data-science-projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/using-terraform-to-set-up-ec2-instances-for-data-science-projects/</guid>
      <description>Take Away  you will learn how to automate ec2 setup using terraform that is suited for data science project.  Tools  EC2 Terraform  Requirements Knowledge Requirements  understand basic of how to create terraform project understand basic of how to set up ec2 instances  System Requirements   WSL/Ubuntu
 I have only tested this in WSL    install all dependencies of cuda
 for list of software requirements, see  https://www.</description>
    </item>
    
  </channel>
</rss>
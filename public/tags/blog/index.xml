<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on Anak Wannaphaschaiyong</title>
    <link>https://awannaphasch2016.github.io/tags/blog/</link>
    <description>Recent content in blog on Anak Wannaphaschaiyong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://awannaphasch2016.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Note On Straight&#39;s Recipe.</title>
      <link>https://awannaphasch2016.github.io/posts/a-note-on-straights-recipe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/a-note-on-straights-recipe/</guid>
      <description>Straight&amp;rsquo;s recipe is similar but not identify to one used by MELPA.Â 1
A recipe describes which local repository to link the files from and how to clone that repository, if repo is not found locally. With this definition of recipe, one can think of recipe as a build step (recipe) of a package.
Ultimately, a package is defined is a collection of files required for package&amp;rsquo;s build. striaght.el views a package in this manner.</description>
    </item>
    
    <item>
      <title>A Note On Straight.el&#39;s Transaction</title>
      <link>https://awannaphasch2016.github.io/posts/a-note-on-straight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/a-note-on-straight/</guid>
      <description>This article is based on staright.el README which at the moment doesn&amp;rsquo;t have written document on how transaction works. So This is a work in progress until I either read straight.el codebase or summarize its documentation.
Conceptually, stright.el clones Git repo and them symlinking files into Emacs&amp;rsquo;s load path. A packages in straight.el is defined as recipe as a files which was symlinked together. I have an article on recipe.</description>
    </item>
    
    <item>
      <title>Building fundamental in Emacs: How to customize key binding in vanilla Emacs?</title>
      <link>https://awannaphasch2016.github.io/posts/building-fundamental-in-emacs-how-to-customize-key-binding-in-vanilla-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/building-fundamental-in-emacs-how-to-customize-key-binding-in-vanilla-emacs/</guid>
      <description>When I first get into Emacs, I was a vim user before, so I picked up Doom Emacs without experience with vanilla Emacs. Transition has been smooth so far, but because I never has experience with Vanilla Emacs before when I encounter a bug in Doom Emacs. I always have to first figure out if it is Doom Emacs problem or Emacs problems. Because of this, I put out a new blog series to help me build a stronger foundation of Vanilla Emacs.</description>
    </item>
    
    <item>
      <title>Comparison of straight.el to other Emacs package manager.</title>
      <link>https://awannaphasch2016.github.io/posts/comparison-of-straight.el-to-other-emacs-package-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/comparison-of-straight.el-to-other-emacs-package-manager/</guid>
      <description>This article is an opinion piece on Comparison to other package managers.
Emacs package manager are split into 2 categories: package.el wrapper or not package.el wrapper.
One idea that straight.el emphasizes a lot is that straight.el manages commits rather than managing a whole a package. Some PM only accept latest commit. Other only accepts repo on github etc. I call this design decision a &amp;ldquo;smallest unit of design implementation.&amp;rdquo;
Other unique takes on managing Emacs packages are Borg (assimilates packages as Git submodules into .</description>
    </item>
    
    <item>
      <title>Comprehensive review of snippets management tools in emacs. The best way to manage code snippets in emacs.</title>
      <link>https://awannaphasch2016.github.io/posts/comprehensive-review-of-snippets-management-tools-in-emacs.-the-best-way-to-manage-code-snippets-in-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/comprehensive-review-of-snippets-management-tools-in-emacs.-the-best-way-to-manage-code-snippets-in-emacs/</guid>
      <description>Personally, I think snippets is under untilize. Same as notes. The fact is people just don&amp;rsquo;t do neither snippets or notes.
I defined code snippet as followed
 A collection of either small/large code which may store in single/multiple files that you will revisit against in the future.
 Focusing on manging code snippets in emacs, few packages come to mind including: yassnipet, auto-yasnippet, yankpad, and code library.
In my workflow, to share code snippet with others, gists is needed.</description>
    </item>
    
    <item>
      <title>Dev Logs: Auto-YASnippet (aka aya) dive deep.</title>
      <link>https://awannaphasch2016.github.io/posts/dev-logs-auto-yasnippet-aka-aya-dive-deep/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/dev-logs-auto-yasnippet-aka-aya-dive-deep/</guid>
      <description>Dev logs is new blog series which dive deep into implementation level. The goal is to understand how things works. I figure this should be an interesting series because I always wanted to know how these program works underneath. Instead of explaining the whole code base, I will only focus on the &amp;ldquo;magical&amp;rdquo; part that sparked my interest the most.
Todays I present to you aya.
I started of the series with aya because, I think, it is a small package with the right portion of magic.</description>
    </item>
    
    <item>
      <title>Economic inside blockchain: How does supply-demand mechanism works in blockchain?</title>
      <link>https://awannaphasch2016.github.io/posts/economic-inside-blockchain-how-does-supply-demand-mechanism-works-in-blockchain/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/economic-inside-blockchain-how-does-supply-demand-mechanism-works-in-blockchain/</guid>
      <description>Gas and Denominations of coins   Figure 1: Denominations of Ethers
  In this section, we will focus on denominations of Ethers. The goal is to provide more concrete example into denomination of a coin.
If you are familiar with Etherem, we have heard Wei and GWei. These are not the only two denominators of Ethers. List of all denominators of Ether is shown in Fig. which is from Etherem yellow paper (aka.</description>
    </item>
    
    <item>
      <title>Emacs Package Explained: How to customize key binding in evil modes?</title>
      <link>https://awannaphasch2016.github.io/posts/emacs-package-explained-how-to-customize-key-binding-in-evil-modes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/emacs-package-explained-how-to-customize-key-binding-in-evil-modes/</guid>
      <description>This is my summary of a more thoroughly explained evil guide, see here.
Keymap Precendence in vanilla emacs  overriding-terminal-local-map for terminal-specific key bind overriding-local-map keymap char property at point keymaps for the current character. Yasnippet keymaps are in this category. emulation-mode-map-alists. Apparently, its more multi-mode keymap management. I am not sure what this means, but if i have to guess it is used in modes that have its known key precedence or other complexity that its key binding system brings.</description>
    </item>
    
    <item>
      <title>Enable x11 display in WSL2</title>
      <link>https://awannaphasch2016.github.io/posts/enable-x11-display-in-wsl2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/enable-x11-display-in-wsl2/</guid>
      <description>Resources are provided in my roam research note.
I successfully connect x-apps via x11 protocol by first installing and launching xming server. Xming application provides x11-server. Then, I need to tell the wsl2 &amp;ldquo;address and port of X11 server to connect wsl2 application to&amp;rdquo; (my note on x11 can be seen here) X11 server is enlisted as WSL2 entrusted DNS which located in resolve.conf. (my note on resolve.conf can be seen here.</description>
    </item>
    
    <item>
      <title>Evolution of Asset Transaction</title>
      <link>https://awannaphasch2016.github.io/posts/evolution-of-asset-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/evolution-of-asset-transaction/</guid>
      <description>This essay is my interpretation of a discussion on &amp;ldquo;NFTing the World for the General Good&amp;rdquo; episode on Real Vision TV. The information in the essay are adapted to fit rational narrative that I have in my brain.
This is the beginning of the essay.
The four phases are categorized into the following
 transaction an physical assets transaction of electron transaction of information transaction of digital assets  Each phase increase efficiency of transactions which depends on three factors: object, process, and rules.</description>
    </item>
    
    <item>
      <title>How to Guarantee Serialization with Two-Phase Locking (2PL) with Example</title>
      <link>https://awannaphasch2016.github.io/posts/how-to-guarantee-serialization-with-two-phase-locking-2pl-with-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/how-to-guarantee-serialization-with-two-phase-locking-2pl-with-example/</guid>
      <description>This is a summary on Chapter 21.1 Two-Phase Locking Techniques for Concurrency Control from Fundamental of Database system by Pearson 2015.
The goal of this blog is to give a concrete example on how 2PL&amp;rsquo;s schedule is guaranteed to be serializable.
  Figure 1: Figure 21.3
    Figure 2: Figure 21.4
  Figure &amp;lt;Figure_21.3&amp;gt; and figure &amp;lt;Figure_21.4&amp;gt; uses the same set of locks which is provided in Shared/Exclusive locks including read_lock, write_lock and unlock.</description>
    </item>
    
    <item>
      <title>How to parse text with awk?</title>
      <link>https://awannaphasch2016.github.io/posts/how-to-parse-text-with-awk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/how-to-parse-text-with-awk/</guid>
      <description>ref  https://stackoverflow.com/questions/6284560/how-to-split-a-variable-by-a-special-character/6284596    Awk Syntax awk &amp;#39;(PATTERN1){...print something..} (PATTERN2){..print something..}&amp;#39; awk &amp;#39;PATTERN1{...print something..} PATTERN2{..print something..}&amp;#39; for each line, if PATTERNN is matched, command in {} will be executed.
syntax `awk &amp;lsquo;NR==1{print}&amp;rsquo; [FILE]` `awk &amp;lsquo;NR==1&amp;rsquo; [FILE]` note for line 1, print whole line `awk &amp;lsquo;NR==1{}&amp;rsquo; [FILE]` note for line 1, {} = don&amp;rsquo;t do anything `awk &amp;lsquo;NR==1{print} {print}&amp;rsquo; [FILE]` note {} without condition is the same as condition always set to True.</description>
    </item>
    
    <item>
      <title>How to publish blog on Jekyll with example.</title>
      <link>https://awannaphasch2016.github.io/posts/how-to-publish-blog-on-jekyll-with-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/how-to-publish-blog-on-jekyll-with-example/</guid>
      <description>You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.
Jekyll requires blog post files to be named according to the following format:
`YEAR-MONTH-DAY-title.MARKUP`
Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file.</description>
    </item>
    
    <item>
      <title>How to use auto yasnippet (aka aya) in your workflow?</title>
      <link>https://awannaphasch2016.github.io/posts/how-to-use-auto-yasnippet-aka-aya-in-your-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/how-to-use-auto-yasnippet-aka-aya-in-your-workflow/</guid>
      <description>All of the content I presented below can be found at Auto-YASnippet Github repo.
Auto-Yasnippet (aka aya) provides the following interactive commands: aya-create, aya-expand, aya-persiste-snippet, and aya-open-line:
I don&amp;rsquo;t quite understand aya-open-line yet, so I will not be explaining it here.
This snippet package support ad-hoc style of editing workflow where you can create useful snippet to be reused as you editing.
Without aya, one would have do the following</description>
    </item>
    
    <item>
      <title>Keybinding In Doom Emacs</title>
      <link>https://awannaphasch2016.github.io/posts/keybinding-in-doom-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/keybinding-in-doom-emacs/</guid>
      <description>Doom Emacs has its own keybinding system. A more accurate access would be Doom Emacs keybinding system is a wrapper over evil mode such that it is smoothly compatible with Emacs.
If you use Evil mode without Emacs configuration framework such as Spacemacs or Doom Emacs, it is frustrating to know if your keybinding is setup properly and will always work as expected at any circumstances. The usually point of failure is when your keybinding is overwritten by other packages.</description>
    </item>
    
    <item>
      <title>Most Efficient Workflow To &#34;Lookup&#34; Documentations On Programming Language.</title>
      <link>https://awannaphasch2016.github.io/posts/most-efficient-workflow-to-lookup-documentations-on-programming-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/most-efficient-workflow-to-lookup-documentations-on-programming-language/</guid>
      <description>The normal workflow of lookup documentation would be to search google, stack-overflow, etc. Alternatively, if you are using IDE, IDE will lookup documentation for you, for example goto-definition etc. Very convenience. What else do you need?
Although, searching online directly is not the best approach, it is everyone last line of defense. On the other hands, IDE is as good as it gets. However, the problem with IDE is that it is context specific.</description>
    </item>
    
    <item>
      <title>My Citation Management Workflow.</title>
      <link>https://awannaphasch2016.github.io/posts/my-citation-management-workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/my-citation-management-workflow/</guid>
      <description>there are three categories of note taking process
 organize files. write notes on a file. search files and notes (aka completion in emacs) organize notes reference to file.  First two are easy to achieve. Put notes and pdf files in folders does the job. The third condition is arguably not difficult neither. One can search for a file given a file directory quickly which can be done with any of the completion packages (e.</description>
    </item>
    
    <item>
      <title>Using terminals in Doom Emacs.</title>
      <link>https://awannaphasch2016.github.io/posts/using-terminals-in-doom-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/using-terminals-in-doom-emacs/</guid>
      <description>To open multiple terminal, a neat trick is to rename file buffer that terminal is openedÂ 1.
To open file from terminal, one can just M-x find-file in the terminal buffer.
  stackoverflow: More than one emacs terminal &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>Using Terraform to set up ec2 instances for data science projects.</title>
      <link>https://awannaphasch2016.github.io/posts/using-terraform-to-set-up-ec2-instances-for-data-science-projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/using-terraform-to-set-up-ec2-instances-for-data-science-projects/</guid>
      <description>Take Away  you will learn how to automate ec2 setup using terraform that is suited for data science project.  Tools  EC2 Terraform  Requirements Knowledge Requirements  understand basic of how to create terraform project understand basic of how to set up ec2 instances  System Requirements   WSL/Ubuntu
 I have only tested this in WSL    install all dependencies of cuda
 for list of software requirements, see  https://www.</description>
    </item>
    
  </channel>
</rss>
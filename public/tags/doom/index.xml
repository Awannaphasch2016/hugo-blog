<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>doom on Anak Wannaphaschaiyong</title>
    <link>https://awannaphasch2016.github.io/tags/doom/</link>
    <description>Recent content in doom on Anak Wannaphaschaiyong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://awannaphasch2016.github.io/tags/doom/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>  A Note On X Where X = &#34;Making Evil Mode Not Awkward With Zsh Completion In Doom Emacs Vterm&#34;
  </title>
      <link>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-making-evil-mode-not-awkward-with-zsh-completion-in-doom-emacs-vterm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-making-evil-mode-not-awkward-with-zsh-completion-in-doom-emacs-vterm/</guid>
      <description>Set pt value to pos fix awkward completion behavior in vterm.
(defun vterm-goto-char (pos) &amp;#34;Set point to POSITION for vterm. The return value is `t&amp;#39;when point moved successfully. It will reset to original position if it can&amp;#39;t move there.&amp;#34; (when (and vterm--term (vterm-cursor-in-command-buffer-p) (vterm-cursor-in-command-buffer-p pos)) (let ((moved t) (origin-point (point)) pt cursor-pos succ) (vterm-reset-cursor-point) ;; Anak: this line cause weird behavior with auto completion (setq cursor-pos (point)) ;; (setq pt cursor-pos) ;; Anak commented out this line (setq pt pos) ;; Anak added this line and completion in vterm works better.</description>
    </item>
    
    <item>
      <title>  Implementing X where X = &#34;Custom Doom Emacs&#39;s Scratch Buffer&#34;
  </title>
      <link>https://awannaphasch2016.github.io/posts/implementing-x-where-x-custom-doom-emacss-scratch-buffer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/implementing-x-where-x-custom-doom-emacss-scratch-buffer/</guid>
      <description>I was trying to implement my own scratch buffer.I learned alot about Emacs&amp;rsquo;s way of programming. I gained a new mental debugging tool.
The main function I started to modify is doom/open-scratch-buffer. The functions deals with opening scratch buffer when current-buffer is inside and outside of a projectile&amp;rsquo;s project.
doom/open-scratch-buffer does the following
 check if scratch will open in the same buffer or as pop up buffer Then, it passes arguments to (doom-scratch-buffer &amp;amp;optional DONT-RESTORE-P MODE DIRECTORY PROJECT-NAME).</description>
    </item>
    
    <item>
      <title>Keybinding In Doom Emacs</title>
      <link>https://awannaphasch2016.github.io/posts/keybinding-in-doom-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/keybinding-in-doom-emacs/</guid>
      <description>Doom Emacs has its own keybinding system. A more accurate explaination is
 Doom Emacs keybinding system is a wrapper over evil mode such that it is smoothly compatible with Emacs.
 If you use Evil mode without Emacs configuration framework such as Spacemacs or Doom Emacs, it is frustrating to know if your keybinding is setup properly and whether it will always work as expected in any circumstances. A common point of failure is when your keybinding is overwritten by some packages.</description>
    </item>
    
    <item>
      <title>Using terminals in Doom Emacs.</title>
      <link>https://awannaphasch2016.github.io/posts/using-terminals-in-doom-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/using-terminals-in-doom-emacs/</guid>
      <description>To open multiple terminal, a neat trick is to rename file buffer that terminal is opened 1.
To open file from terminal, one can just M-x find-file in the terminal buffer.
  stackoverflow: More than one emacs terminal &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>X Implementation Where X = Doom Emacs&#39;s &#43;lookup/ Command.</title>
      <link>https://awannaphasch2016.github.io/posts/x-implementation-where-x-doom-emacss-&#43;lookup-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/x-implementation-where-x-doom-emacss-&#43;lookup-command/</guid>
      <description>I was trying to figure out +lookup/definition that open in other window. In one of the issue, Henrik 1 mention that some lookup backend (As an example, xref is a built in backend for lookup) are asynchronous and there is no standardized mechanism to talk to them to see whether the command runs successfully 2.
lets call this new command +lookup/definition-other-window Current possible solutions are
 ignore validation step to make sure that the command runs succesfully.</description>
    </item>
    
    <item>
      <title>X implementation where X = executing org babel block in Doom Emacs.</title>
      <link>https://awannaphasch2016.github.io/posts/x-implementation-where-x-executing-org-babel-block-in-doom-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/x-implementation-where-x-executing-org-babel-block-in-doom-emacs/</guid>
      <description>Editing History  [2022-07-06 Wed] Last edit is on [2022-07-07 Thu]    This article investigates what is executed when one presses enter to execute org babel source block in Doom Emacs.
Pressing enter in org-babel block will execute +org/dwim-at-point, see code below for reference. First, it checks if point is on a button. Then, it proceeds to assign evaluated output of org-element-context and org-element-type.
(+org/dwim-at-point *optional ARG) .</description>
    </item>
    
  </channel>
</rss>
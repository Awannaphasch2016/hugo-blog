<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>implementation on Anak Wannaphaschaiyong</title>
    <link>https://awannaphasch2016.github.io/tags/implementation/</link>
    <description>Recent content in implementation on Anak Wannaphaschaiyong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://awannaphasch2016.github.io/tags/implementation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>  Implementing X where X = &#34;Custom Doom Emacs&#39;s Scratch Buffer&#34;
  </title>
      <link>https://awannaphasch2016.github.io/posts/implementing-x-where-x-custom-doom-emacss-scratch-buffer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/implementing-x-where-x-custom-doom-emacss-scratch-buffer/</guid>
      <description>I was trying to implement my own scratch buffer.I learned alot about Emacs&amp;rsquo;s way of programming. I gained a new mental debugging tool.
The main function I started to modify is doom/open-scratch-buffer. The functions deals with opening scratch buffer when current-buffer is inside and outside of a projectile&amp;rsquo;s project.
doom/open-scratch-buffer does the following
 check if scratch will open in the same buffer or as pop up buffer Then, it passes arguments to (doom-scratch-buffer &amp;amp;optional DONT-RESTORE-P MODE DIRECTORY PROJECT-NAME).</description>
    </item>
    
    <item>
      <title>Elisp Code to Find List of Top N MELPA Authors</title>
      <link>https://awannaphasch2016.github.io/posts/elisp-code-to-find-list-of-top-n-melpa-authors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/elisp-code-to-find-list-of-top-n-melpa-authors/</guid>
      <description>;; https://www.reddit.com/r/emacs/comments/t9qs6h/need_help_listing_all_emacs_super_developers/ (require &amp;#39;url) (require &amp;#39;cl-lib) (defvar url-http-end-of-headers) (defvar smelpa-json nil &amp;#34;Melpa recipe JSON data.&amp;#34;) (defun smelpa-json () &amp;#34;Return an alist of MELPA recipe metadata.&amp;#34; (or smelpa-json (setq smelpa-json (with-current-buffer (url-retrieve-synchronously &amp;#34;https://melpa.org/archive.json&amp;#34;) (goto-char url-http-end-of-headers) (json-read))))) (defun smelpa-packages-by-author () &amp;#34;Return alist of form: ((author . (package-url...))).&amp;#34; (let (authors) (cl-loop for (_ . data) in (smelpa-json) do (when-let ((props (alist-get &amp;#39;props data)) (url (alist-get &amp;#39;url props)) (parsed (url-generic-parse-url url)) (filename (url-filename parsed)) (tokens (split-string filename &amp;#34;/&amp;#34; &amp;#39;omit-nulls)) (author (intern (car tokens)))) (if (alist-get author authors) (push url (alist-get author authors)) (push (cons author (list url)) authors)))) authors)) (defun smelpa-most-published-authors (n) &amp;#34;Return alist of form ((author .</description>
    </item>
    
    <item>
      <title>X implementation where X = executing org babel block in Doom Emacs.</title>
      <link>https://awannaphasch2016.github.io/posts/x-implementation-where-x-executing-org-babel-block-in-doom-emacs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/x-implementation-where-x-executing-org-babel-block-in-doom-emacs/</guid>
      <description>Editing History  [2022-07-06 Wed] Last edit is on [2022-07-07 Thu]    This article investigates what is executed when one presses enter to execute org babel source block in Doom Emacs.
Pressing enter in org-babel block will execute +org/dwim-at-point, see code below for reference. First, it checks if point is on a button. Then, it proceeds to assign evaluated output of org-element-context and org-element-type.
(+org/dwim-at-point *optional ARG) .</description>
    </item>
    
  </channel>
</rss>
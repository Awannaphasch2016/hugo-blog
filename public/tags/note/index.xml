<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>note on Anak Wannaphaschaiyong</title>
    <link>https://awannaphasch2016.github.io/tags/note/</link>
    <description>Recent content in note on Anak Wannaphaschaiyong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://awannaphasch2016.github.io/tags/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>  A Note Of X Where X = &#34;Debugging Org&#39;s Overwritten Variables&#34;
  </title>
      <link>https://awannaphasch2016.github.io/posts/a-note-of-x-where-x-debugging-orgs-overwritten-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/a-note-of-x-where-x-debugging-orgs-overwritten-variables/</guid>
      <description>To debug org related bug, org-reload reloads all lisp files in ~/.emacs.d/.local/straight/repos/org/. Reloading config.el files should inform you what information has been overwritten. If you use Doom Emacs and modify either package.el or init.el, you must run doom sync in your terminal (outside of emacs), then consequently run doom/reload inside Doom Emacs for modification to correctly take effect.
It is important to note that you should always make sure to set custom-variables &amp;mdash; variables declared by defcustom &amp;mdash; using custom-set-variables.</description>
    </item>
    
    <item>
      <title>  A Note On X Where X = &#34;adding jump state to command.&#34;
  </title>
      <link>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-adding-jump-state-to-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-adding-jump-state-to-command/</guid>
      <description>&amp;ldquo;Adding jump state to command.&amp;rdquo; implies that position ((point)) that the added command is evaluated is added to jump state. In the other word, you can get back to (point) that you executed the command by using (better-jumper-jump-forward).
I was trying to add &amp;ldquo;jump state&amp;rdquo; to (+spell/previous-error) and +spell/next-error.
Note that +spell prefix means this command is provided by a Doom&amp;rsquo;s module. From a quick glance into the code, it is clear that &amp;mdash; just like other Doom&amp;rsquo;s module &amp;mdash; it implements branching condition to allow fallback behavior based on context such as current mode or available packages.</description>
    </item>
    
    <item>
      <title>  A Note On X Where X = &#34;Emac&#39;s Combobulate Package&#34;
  </title>
      <link>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-emacs-combobulate-package/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-emacs-combobulate-package/</guid>
      <description>Lets inspect combobulate-navigate-previous by step into the function.
The following functions are called in order:
 combobulate-navigate-previous combobulate--move-point-to-node responsible for display and move node. (combobulate--navigate &#39;previous) pass previuos to combobulate--navigate combobulate--nav-get-prev-sibling get sibling node by query its parents node and get all of its nodes. sibling nodes are arrange in order, so getting previous or next siblings nodes is easy. combobulate--nav-get-sibling-nodes outputs list of nodes seq filter check for matched node.</description>
    </item>
    
    <item>
      <title>  A Note on X where X = &#34;LSP &#43; flycheck &#43; lsp-pyright&#34;
  </title>
      <link>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-lsp-&#43;-flycheck-&#43;-lsp-pyright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-lsp-&#43;-flycheck-&#43;-lsp-pyright/</guid>
      <description>History of edit
 Last edit is &amp;lt;2022-11-28 Mon&amp;gt;.  There are 3 components to pay attention to including: conda.el, lsp-pyright, and flycheck.
First, conda.el allows user to activate conda env from within Emacs. Users can check conda.el by checking conda-env-home-directory, conda-env-current-name, and conda-env-current-path.
Second, LSP is language server a general concept outside of Emacs and python. LSP may have type checking as its feature. lsp-pyright is python language server (called &amp;ldquo;pyright&amp;rdquo;).</description>
    </item>
    
    <item>
      <title>  A Note On X Where X = &#34;Making Evil Mode Not Awkward With Zsh Completion In Doom Emacs Vterm&#34;
  </title>
      <link>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-making-evil-mode-not-awkward-with-zsh-completion-in-doom-emacs-vterm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/a-note-on-x-where-x-making-evil-mode-not-awkward-with-zsh-completion-in-doom-emacs-vterm/</guid>
      <description>Set pt value to pos fix awkward completion behavior in vterm.
(defun vterm-goto-char (pos) &amp;#34;Set point to POSITION for vterm. The return value is `t&amp;#39;when point moved successfully. It will reset to original position if it can&amp;#39;t move there.&amp;#34; (when (and vterm--term (vterm-cursor-in-command-buffer-p) (vterm-cursor-in-command-buffer-p pos)) (let ((moved t) (origin-point (point)) pt cursor-pos succ) (vterm-reset-cursor-point) ;; Anak: this line cause weird behavior with auto completion (setq cursor-pos (point)) ;; (setq pt cursor-pos) ;; Anak commented out this line (setq pt pos) ;; Anak added this line and completion in vterm works better.</description>
    </item>
    
    <item>
      <title>  Note of X where X = &#34;I cannot set custom-variable of org-agenda using either setq or custom-set-variables&#34;
  </title>
      <link>https://awannaphasch2016.github.io/posts/note-of-x-where-x-i-cannot-set-custom-variable-of-org-agenda-using-either-setq-or-custom-set-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awannaphasch2016.github.io/posts/note-of-x-where-x-i-cannot-set-custom-variable-of-org-agenda-using-either-setq-or-custom-set-variables/</guid>
      <description>I couldn&amp;rsquo;t use setq and custom-set-variables to have org-refile shows list of newly set org-agenda-files.
Started to solve, first suspect I found was when I learned about custom.el file. Custom variable set by defcustom will set custom value in custom.el. I reset all custom.el to nil to make sure that it doesn&amp;rsquo;t set custom variables under weird condition that I am not aware of.
I reloaded Doom Emacs. Changed variables didn&amp;rsquo;t reflect in helpful-variable, and org-agenda-files was not set to nil &amp;mdash; value shown in custom.</description>
    </item>
    
  </channel>
</rss>